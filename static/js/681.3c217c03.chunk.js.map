{"version":3,"file":"static/js/681.3c217c03.chunk.js","mappings":"qMAEaA,EAAW,mCAAG,WAAMC,GAAN,kGAEAC,MAAM,gCAAD,OACMD,EADN,mBAJT,qCAEI,WAEjBE,EAFiB,QAMTC,GANS,sBAOf,IAAIC,MAAM,8BAPK,uBAUJF,EAASG,OAVL,cAUjBC,EAViB,yBAWhBA,GAXgB,yCAavBC,QAAQC,IAAR,MAbuB,kFAAH,qD,yGCwCxB,UAtCqB,WACnB,IACQC,GADOC,EAAAA,EAAAA,MACPD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,8GAEAhB,EAAAA,EAAAA,GAAY,SAAD,OAAUU,EAAV,cAFX,OAEhBO,EAFgB,OAItBT,QAAQC,IAAIQ,EAAZ,WACAH,EAAWG,EAAQA,SALG,gDAOtBT,QAAQC,IAAI,QAAZ,MAPsB,yDAAH,qDAUvBO,GACD,GAAE,CAACN,KAEF,iBAAKQ,UAAU,sBAAf,WACE,sCAEA,wBACsB,IAAnBL,EAAQM,QACP,sCAEAN,EAAQO,KAAI,SAAAC,GAAM,OAChB,2BACE,uBAAIA,EAAOC,UACX,uBAAID,EAAOE,YAFJF,EAAOG,GADA,QAU3B,C,sBCxCD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C","sources":["api/MovieApi.js","components/Reviews.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["export const API_KEY = 'f7559877f1d0830f5dd1b2777f8228a1';\n\nexport const fetchImages = async endpoint => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/${endpoint}api_key=${API_KEY}`\n    );\n\n    if (!response.ok) {\n      throw new Error('Network response is failed');\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n    return error;\n  }\n};\n","import { fetchImages } from 'api/MovieApi';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst MovieReviews = () => {\n  const params = useParams();\n  const { movieId } = params;\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        const results = await fetchImages(`movie/${movieId}/reviews?`);\n\n        console.log(results, `results`);\n        setReviews(results.results);\n      } catch (error) {\n        console.log('Error', error);\n      }\n    };\n    fetchMovieReviews();\n  }, [movieId]);\n  return (\n    <div className=\"moreDetails_reviews\">\n      <h2>Reviews:</h2>\n\n      <ul>\n        {reviews.length === 0 ? (\n          <p>No reviews</p>\n        ) : (\n          reviews.map(review => (\n            <li key={review.id}>\n              <p>{review.author}</p>\n              <p>{review.content}</p>\n            </li>\n          ))\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default MovieReviews;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["fetchImages","endpoint","fetch","response","ok","Error","json","data","console","log","movieId","useParams","useState","reviews","setReviews","useEffect","fetchMovieReviews","results","className","length","map","review","author","content","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}